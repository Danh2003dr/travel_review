// lib/providers/reviews_provider.dart
// ------------------------------------------------------
// ‚≠ê REVIEWS PROVIDER
// - Qu·∫£n l√Ω reviews v√† ratings
// - Sync v·ªõi Firestore
// ------------------------------------------------------

import 'package:flutter/foundation.dart';
import '../models/review.dart';
import '../data/firebase_place_repository.dart';

class ReviewsProvider with ChangeNotifier {
  final FirebasePlaceRepository _placeRepo = FirebasePlaceRepository();

  Map<String, List<Review>> _placeReviews = {};
  bool _isLoading = false;
  String? _errorMessage;

  // ------------------------------------------------------
  // üìä GETTERS
  // ------------------------------------------------------
  bool get isLoading => _isLoading;
  String? get errorMessage => _errorMessage;

  List<Review> getReviewsForPlace(String placeId) {
    return _placeReviews[placeId] ?? [];
  }

  double getAverageRating(String placeId) {
    final reviews = getReviewsForPlace(placeId);
    if (reviews.isEmpty) return 0.0;

    final totalRating = reviews.fold(0.0, (sum, review) => sum + review.rating);
    return totalRating / reviews.length;
  }

  int getReviewsCount(String placeId) {
    return getReviewsForPlace(placeId).length;
  }

  // ------------------------------------------------------
  // üîÑ LOAD REVIEWS
  // ------------------------------------------------------
  Future<void> loadReviews(String placeId) async {
    try {
      _isLoading = true;
      _errorMessage = null;
      notifyListeners();

      final reviews = await _placeRepo.fetchReviews(placeId);
      _placeReviews[placeId] = reviews;

      print('‚úÖ Loaded ${reviews.length} reviews for place $placeId');
    } catch (e) {
      _errorMessage = 'Kh√¥ng th·ªÉ t·∫£i reviews: $e';
      print('‚ùå L·ªói load reviews: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // ------------------------------------------------------
  // ‚úçÔ∏è ADD REVIEW
  // ------------------------------------------------------
  Future<bool> addReview(String placeId, Review review) async {
    try {
      _isLoading = true;
      _errorMessage = null;
      notifyListeners();

      await _placeRepo.addReview(review, placeId);

      // Th√™m review v√†o local list
      _placeReviews[placeId] ??= [];
      _placeReviews[placeId]!.add(review);

      print('‚úÖ Added review for place $placeId');
      return true;
    } catch (e) {
      _errorMessage = 'Kh√¥ng th·ªÉ th√™m review: $e';
      print('‚ùå L·ªói add review: $e');
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // ------------------------------------------------------
  // üóëÔ∏è DELETE REVIEW
  // ------------------------------------------------------
  Future<bool> deleteReview(String placeId, String reviewId) async {
    try {
      _isLoading = true;
      _errorMessage = null;
      notifyListeners();

      await _placeRepo.deleteReview(placeId, reviewId);

      // X√≥a review kh·ªèi local list
      _placeReviews[placeId]?.removeWhere((review) => review.id == reviewId);

      print('‚úÖ Deleted review $reviewId');
      return true;
    } catch (e) {
      _errorMessage = 'Kh√¥ng th·ªÉ x√≥a review: $e';
      print('‚ùå L·ªói delete review: $e');
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // ------------------------------------------------------
  // üîç CHECK IF USER REVIEWED
  // ------------------------------------------------------
  bool hasUserReviewed(String placeId, String userId) {
    final reviews = getReviewsForPlace(placeId);
    return reviews.any((review) => review.userId == userId);
  }

  Review? getUserReview(String placeId, String userId) {
    final reviews = getReviewsForPlace(placeId);
    try {
      return reviews.firstWhere((review) => review.userId == userId);
    } catch (e) {
      return null;
    }
  }

  // ------------------------------------------------------
  // üßπ CLEAR ERROR
  // ------------------------------------------------------
  void clearError() {
    _errorMessage = null;
    notifyListeners();
  }

  // ------------------------------------------------------
  // üîÑ REFRESH
  // ------------------------------------------------------
  Future<void> refresh(String placeId) async {
    await loadReviews(placeId);
  }

  // ------------------------------------------------------
  // üßπ CLEAR CACHE
  // ------------------------------------------------------
  void clearCache() {
    _placeReviews.clear();
    notifyListeners();
  }
}
