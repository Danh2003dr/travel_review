// lib/services/storage_service.dart
// ------------------------------------------------------
// üì∏ FIREBASE STORAGE SERVICE
// - Qu·∫£n l√Ω upload/download ·∫£nh l√™n Firebase Storage
// - H·ªó tr·ª£ upload ·∫£nh review, avatar, place images
// ------------------------------------------------------

import 'dart:io';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:uuid/uuid.dart';

class StorageService {
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final Uuid _uuid = const Uuid();

  // ------------------------------------------------------
  // üì§ UPLOAD ·∫¢NH
  // ------------------------------------------------------

  // Upload ·∫£nh chung
  Future<String?> uploadImage({
    required File imageFile,
    required String folder, // 'reviews', 'avatars', 'places'
    String? fileName,
  }) async {
    try {
      // T·∫°o t√™n file unique n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
      final name = fileName ?? '${_uuid.v4()}.jpg';

      // T·∫°o reference ƒë·∫øn Storage
      final ref = _storage.ref().child('$folder/$name');

      // Upload file
      final uploadTask = ref.putFile(imageFile);

      // ƒê·ª£i upload ho√†n th√†nh
      final snapshot = await uploadTask;

      // L·∫•y download URL
      final downloadUrl = await snapshot.ref.getDownloadURL();

      print('‚úÖ Upload th√†nh c√¥ng: $downloadUrl');
      return downloadUrl;
    } catch (e) {
      print('‚ùå L·ªói upload ·∫£nh: $e');
      return null;
    }
  }

  // Upload ·∫£nh avatar
  Future<String?> uploadAvatar(File imageFile, String userId) async {
    return await uploadImage(
      imageFile: imageFile,
      folder: 'avatars',
      fileName: '$userId.jpg',
    );
  }

  // Upload ·∫£nh review
  Future<String?> uploadReviewImage(File imageFile) async {
    return await uploadImage(imageFile: imageFile, folder: 'reviews');
  }

  // Upload nhi·ªÅu ·∫£nh review
  Future<List<String>> uploadReviewImages(List<File> imageFiles) async {
    final List<String> urls = [];

    for (final file in imageFiles) {
      final url = await uploadReviewImage(file);
      if (url != null) {
        urls.add(url);
      }
    }

    return urls;
  }

  // Upload ·∫£nh ƒë·ªãa ƒëi·ªÉm
  Future<String?> uploadPlaceImage(File imageFile, String placeId) async {
    return await uploadImage(
      imageFile: imageFile,
      folder: 'places',
      fileName: '$placeId.jpg',
    );
  }

  // ------------------------------------------------------
  // üóëÔ∏è X√ìA ·∫¢NH
  // ------------------------------------------------------

  // X√≥a ·∫£nh theo URL
  Future<bool> deleteImageByUrl(String imageUrl) async {
    try {
      final ref = _storage.refFromURL(imageUrl);
      await ref.delete();
      print('‚úÖ X√≥a ·∫£nh th√†nh c√¥ng: $imageUrl');
      return true;
    } catch (e) {
      print('‚ùå L·ªói x√≥a ·∫£nh: $e');
      return false;
    }
  }

  // X√≥a nhi·ªÅu ·∫£nh
  Future<void> deleteImages(List<String> imageUrls) async {
    for (final url in imageUrls) {
      await deleteImageByUrl(url);
    }
  }

  // ------------------------------------------------------
  // üìä TI·ªÜN √çCH
  // ------------------------------------------------------

  // L·∫•y metadata c·ªßa ·∫£nh
  Future<FullMetadata?> getImageMetadata(String imageUrl) async {
    try {
      final ref = _storage.refFromURL(imageUrl);
      return await ref.getMetadata();
    } catch (e) {
      print('‚ùå L·ªói l·∫•y metadata: $e');
      return null;
    }
  }

  // Ki·ªÉm tra ·∫£nh c√≥ t·ªìn t·∫°i kh√¥ng
  Future<bool> imageExists(String imageUrl) async {
    try {
      final ref = _storage.refFromURL(imageUrl);
      await ref.getMetadata();
      return true;
    } catch (e) {
      return false;
    }
  }
}
