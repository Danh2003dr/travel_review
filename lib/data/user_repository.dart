// lib/data/user_repository.dart
// ------------------------------------------------------
// üìä USER REPOSITORY
// - Qu·∫£n l√Ω d·ªØ li·ªáu ng∆∞·ªùi d√πng (th√¥ng tin c√° nh√¢n, reviews, favorites)
// - Hi·ªán t·∫°i d√πng mock data, sau n√†y c√≥ th·ªÉ k·∫øt n·ªëi v·ªõi Firebase/API
// ------------------------------------------------------

import '../models/user.dart';
import '../models/review.dart';
import '../models/place.dart';
import 'in_memory_place_repository.dart';

class UserRepository {
  // L∆∞u tr·ªØ d·ªØ li·ªáu user hi·ªán t·∫°i (mock)
  User? _currentUser;

  // Repository ƒë·ªÉ l·∫•y th√¥ng tin ƒë·ªãa ƒëi·ªÉm
  final InMemoryPlaceRepository _placeRepository = InMemoryPlaceRepository();

  // ------------------------------------------------------
  // üë§ QU·∫¢N L√ù TH√îNG TIN USER
  // ------------------------------------------------------

  // L·∫•y th√¥ng tin user hi·ªán t·∫°i
  User? getCurrentUser() {
    return _currentUser ?? _createMockUser();
  }

  // T·∫°o mock user v·ªõi d·ªØ li·ªáu m·∫´u
  User _createMockUser() {
    _currentUser = User(
      id: 'user_demo_001',
      name: 'Ng∆∞·ªùi d√πng demo',
      email: 'demo@example.com',
      avatarUrl: 'https://i.pravatar.cc/200?img=5',
      joinDate: DateTime(2024, 1, 15),
      favoritePlaceIds: ['place_001', 'place_003', 'place_005'],
      reviewIds: ['review_001', 'review_002', 'review_003'],
      totalReviews: 3,
      averageRating: 4.2,
    );
    return _currentUser!;
  }

  // C·∫≠p nh·∫≠t th√¥ng tin user
  void updateUser(User user) {
    _currentUser = user;
  }

  // ------------------------------------------------------
  // ‚ù§Ô∏è QU·∫¢N L√ù FAVORITES
  // ------------------------------------------------------

  // L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm y√™u th√≠ch
  Future<List<Place>> getFavoritePlaces() async {
    final user = getCurrentUser();
    if (user == null) return [];

    final places = await _placeRepository.fetchTopPlaces();
    return places
        .where((place) => user.favoritePlaceIds.contains(place.id))
        .toList();
  }

  // Th√™m/b·ªè y√™u th√≠ch m·ªôt ƒë·ªãa ƒëi·ªÉm
  Future<void> toggleFavorite(String placeId) async {
    final user = getCurrentUser();
    if (user == null) return;

    final favoriteIds = List<String>.from(user.favoritePlaceIds);

    if (favoriteIds.contains(placeId)) {
      favoriteIds.remove(placeId); // B·ªè y√™u th√≠ch
    } else {
      favoriteIds.add(placeId); // Th√™m y√™u th√≠ch
    }

    final updatedUser = user.copyWith(favoritePlaceIds: favoriteIds);
    updateUser(updatedUser);
  }

  // Ki·ªÉm tra xem ƒë·ªãa ƒëi·ªÉm c√≥ ƒë∆∞·ª£c y√™u th√≠ch kh√¥ng
  bool isFavorite(String placeId) {
    final user = getCurrentUser();
    return user?.favoritePlaceIds.contains(placeId) ?? false;
  }

  // ------------------------------------------------------
  // üìù QU·∫¢N L√ù REVIEWS C·ª¶A USER
  // ------------------------------------------------------

  // L·∫•y danh s√°ch reviews ƒë√£ vi·∫øt
  Future<List<Review>> getUserReviews() async {
    final user = getCurrentUser();
    if (user == null) return [];

    // Mock reviews c·ªßa user
    final reviews = [
      Review(
        id: 'review_001',
        placeId: 'place_001',
        userId: user.id,
        userName: user.name,
        userAvatar: user.avatarUrl,
        userAvatarUrl: user.avatarUrl,
        rating: 4.5,
        content:
            'ƒê·ªãa ƒëi·ªÉm n√†y th·∫≠t tuy·ªát v·ªùi! C·∫£nh ƒë·∫πp, kh√¥ng kh√≠ trong l√†nh. T√¥i s·∫Ω quay l·∫°i l·∫ßn n·ªØa.',
        imageUrl: '',
        createdAt: DateTime(2024, 2, 15),
        photos: [],
      ),
      Review(
        id: 'review_002',
        placeId: 'place_002',
        userId: user.id,
        userName: user.name,
        userAvatar: user.avatarUrl,
        userAvatarUrl: user.avatarUrl,
        rating: 5.0,
        content:
            'Tr·∫£i nghi·ªám ho√†n h·∫£o! D·ªãch v·ª• t·ªët, gi√° c·∫£ h·ª£p l√Ω. R·∫•t ƒë√°ng ƒë·ªÉ gh√© thƒÉm.',
        imageUrl: '',
        createdAt: DateTime(2024, 2, 10),
        photos: [],
      ),
      Review(
        id: 'review_003',
        placeId: 'place_003',
        userId: user.id,
        userName: user.name,
        userAvatar: user.avatarUrl,
        userAvatarUrl: user.avatarUrl,
        rating: 3.0,
        content:
            'Kh√¥ng t·ªá nh∆∞ng c≈©ng kh√¥ng xu·∫•t s·∫Øc. C√≥ m·ªôt s·ªë ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán.',
        imageUrl: '',
        createdAt: DateTime(2024, 2, 5),
        photos: [],
      ),
    ];

    return reviews;
  }

  // L·∫•y th·ªëng k√™ reviews c·ªßa user
  Map<String, dynamic> getUserReviewStats() {
    final user = getCurrentUser();
    if (user == null) return {};

    return {
      'totalReviews': user.totalReviews,
      'averageRating': user.averageRating,
      'joinDate': user.joinDate,
      'favoriteCount': user.favoritePlaceIds.length,
    };
  }

  // ------------------------------------------------------
  // üîß TI·ªÜN √çCH KH√ÅC
  // ------------------------------------------------------

  // L√†m m·ªõi d·ªØ li·ªáu user (d√πng khi pull-to-refresh)
  Future<void> refreshUserData() async {
    // Trong th·ª±c t·∫ø, s·∫Ω g·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t
    await Future.delayed(const Duration(milliseconds: 500)); // Mock delay
  }
}
