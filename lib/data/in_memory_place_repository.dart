// lib/data/in_memory_place_repository.dart
// ------------------------------------------------------
// üß© IN-MEMORY REPOSITORY (Mock data cho UI)
// - Gi√∫p ch·∫°y th·ª≠ ·ª©ng d·ª•ng m√† kh√¥ng c·∫ßn k·∫øt n·ªëi m·∫°ng.
// - D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u t·∫°m trong b·ªô nh·ªõ, m√¥ ph·ªèng delay m·∫°ng.
// - C√≥ th·ªÉ thay th·∫ø b·∫±ng FirestorePlaceRepository sau n√†y.
// ------------------------------------------------------

import 'dart:async';
import '../models/place.dart';
import '../models/review.dart';
import 'place_repository.dart';

class InMemoryPlaceRepository implements PlaceRepository {
  InMemoryPlaceRepository();

  // ------------------------------------------------------
  // üîπ D·ªÆ LI·ªÜU GI·∫¢ ‚Äì danh s√°ch ƒë·ªãa ƒëi·ªÉm
  // ------------------------------------------------------
  static final _places = <Place>[
    Place(
      id: '1',
      name: 'B√£i bi·ªÉn Nha Trang',
      type: 'bi·ªÉn',
      city: 'Nha Trang',
      country: 'Vi·ªát Nam',
      description:
          'B√£i c√°t tr·∫Øng, n∆∞·ªõc trong xanh, ph√π h·ª£p t·∫Øm bi·ªÉn v√† l·∫∑n ng·∫Øm san h√¥.',
      ratingAvg: 4.6,
      ratingCount: 128,
      thumbnailUrl: 'https://picsum.photos/id/1018/800/500',
      lat: 12.2388,
      lng: 109.1967,
    ),
    Place(
      id: '2',
      name: 'Fansipan',
      type: 'n√∫i',
      city: 'Sa Pa',
      country: 'Vi·ªát Nam',
      description: 'N√≥c nh√† ƒê√¥ng D∆∞∆°ng, ƒëi c√°p treo v√† sƒÉn m√¢y tuy·ªát ƒë·∫πp.',
      ratingAvg: 4.7,
      ratingCount: 203,
      thumbnailUrl: 'https://picsum.photos/id/1021/800/500',
      lat: 22.3033,
      lng: 103.7728,
    ),
    Place(
      id: '3',
      name: 'Ph·ªë c·ªï H·ªôi An',
      type: 'vƒÉn h√≥a',
      city: 'H·ªôi An',
      country: 'Vi·ªát Nam',
      description:
          'ƒê√®n l·ªìng, ki·∫øn tr√∫c c·ªï, ·∫©m th·ª±c phong ph√∫, ch·ª•p ·∫£nh si√™u ƒë·∫πp.',
      ratingAvg: 4.8,
      ratingCount: 320,
      thumbnailUrl: 'https://picsum.photos/id/1035/800/500',
      lat: 15.8801,
      lng: 108.3380,
    ),
    Place(
      id: '4',
      name: 'C√π Lao Ch√†m',
      type: 'bi·ªÉn',
      city: 'Qu·∫£ng Nam',
      country: 'Vi·ªát Nam',
      description: 'ƒê·∫£o hoang s∆°, l·∫∑n ng·∫Øm san h√¥, h·∫£i s·∫£n t∆∞∆°i.',
      ratingAvg: 4.5,
      ratingCount: 77,
      thumbnailUrl: 'https://picsum.photos/id/1011/800/500',
      lat: 15.9570,
      lng: 108.4890,
    ),
    Place(
      id: '5',
      name: 'ƒê√† L·∫°t ‚Äì H·ªì Xu√¢n H∆∞∆°ng',
      type: 'thi√™n nhi√™n',
      city: 'ƒê√† L·∫°t',
      country: 'Vi·ªát Nam',
      description: 'Kh√¥ng kh√≠ m√°t m·∫ª quanh nƒÉm, c·∫£nh quan l√£ng m·∫°n.',
      ratingAvg: 4.4,
      ratingCount: 96,
      thumbnailUrl: 'https://picsum.photos/id/1043/800/500',
      lat: 11.9465,
      lng: 108.4419,
    ),
  ];

  // ------------------------------------------------------
  // üîπ D·ªÆ LI·ªÜU GI·∫¢ ‚Äì danh s√°ch review theo ƒë·ªãa ƒëi·ªÉm
  // ------------------------------------------------------
  static final _reviews = <String, List<Review>>{
    '1': [
      Review(
        id: 'r1',
        placeId: '1',
        userId: 'user_001',
        userName: 'Minh Anh',
        userAvatar: 'https://i.pravatar.cc/100?img=12',
        userAvatarUrl: 'https://i.pravatar.cc/100?img=12',
        rating: 5,
        content:
            'Bi·ªÉn ƒë·∫πp, n∆∞·ªõc trong. R·∫•t ƒë√°ng ƒëi v√†o m√πa h√®! ·∫¢nh s·ªëng ·∫£o bao ch·∫•t.',
        imageUrl: '',
        createdAt: DateTime.now().subtract(const Duration(days: 2)),
      ),
      Review(
        id: 'r2',
        placeId: '1',
        userId: 'user_002',
        userName: 'Tu·∫•n Ki·ªát',
        userAvatar: 'https://i.pravatar.cc/100?img=8',
        userAvatarUrl: 'https://i.pravatar.cc/100?img=8',
        rating: 4,
        content: 'ƒê√¥ng kh√°ch cu·ªëi tu·∫ßn. N√™n ƒëi s·ªõm bu·ªïi s√°ng ƒë·ªÉ ƒë·ª° n·∫Øng.',
        imageUrl: '',
        createdAt: DateTime.now().subtract(const Duration(days: 6)),
      ),
    ],
    '3': [
      Review(
        id: 'r3',
        placeId: '3',
        userId: 'user_003',
        userName: 'Qu·ª≥nh Chi',
        userAvatar: 'https://i.pravatar.cc/100?img=31',
        userAvatarUrl: 'https://i.pravatar.cc/100?img=31',
        rating: 5,
        content: 'ƒê√™m th·∫£ ƒë√®n l·ªìng qu√° th∆° m·ªông. M√≥n cao l·∫ßu ngon!',
        imageUrl: '',
        createdAt: DateTime.now().subtract(const Duration(days: 1)),
      ),
    ],
  };

  // ------------------------------------------------------
  // üß† C√ÅC H√ÄM TRI·ªÇN KHAI INTERFACE (PlaceRepository)
  // ------------------------------------------------------

  // L·∫•y top ƒë·ªãa ƒëi·ªÉm (theo rating cao nh·∫•t)
  @override
  Future<List<Place>> fetchTopPlaces({int limit = 10}) async {
    await Future.delayed(
      const Duration(milliseconds: 350),
    ); // m√¥ ph·ªèng ƒë·ªô tr·ªÖ m·∫°ng
    final sorted = [..._places]
      ..sort((a, b) => b.ratingAvg.compareTo(a.ratingAvg));
    return sorted.take(limit).toList();
  }

  // L·∫•y chi ti·∫øt 1 ƒë·ªãa ƒëi·ªÉm theo id
  @override
  Future<Place?> getPlaceById(String id) async {
    await Future.delayed(const Duration(milliseconds: 250));
    try {
      return _places.firstWhere((p) => p.id == id);
    } catch (_) {
      return null;
    }
  }

  // T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm theo t·ª´ kh√≥a v√† lo·∫°i h√¨nh
  @override
  Future<List<Place>> searchPlaces({String keyword = '', String? type}) async {
    await Future.delayed(const Duration(milliseconds: 350));
    Iterable<Place> result = _places;
    if (keyword.isNotEmpty) {
      final k = keyword.toLowerCase();
      result = result.where(
        (p) =>
            p.name.toLowerCase().contains(k) ||
            p.city.toLowerCase().contains(k),
      );
    }
    if (type != null && type.isNotEmpty) {
      result = result.where((p) => p.type.toLowerCase() == type.toLowerCase());
    }
    return result.toList();
  }

  // L·∫•y danh s√°ch review theo ƒë·ªãa ƒëi·ªÉm
  @override
  Future<List<Review>> fetchReviews(String placeId, {int limit = 10}) async {
    await Future.delayed(const Duration(milliseconds: 300));
    final list = _reviews[placeId] ?? [];
    final sorted = [...list]
      ..sort((a, b) => b.createdAt.compareTo(a.createdAt));
    return sorted.take(limit).toList();
  }
}
