// lib/features/search/search_screen.dart
// ------------------------------------------------------
// üîé SEARCH SCREEN
// - Nh·∫≠p t·ª´ kh√≥a, ch·ªçn chip lo·∫°i h√¨nh ‚Üí hi·ªÉn th·ªã k·∫øt qu·∫£ d·∫°ng Grid
// - D·ªØ li·ªáu l·∫•y qua PlaceRepository (mock ho·∫∑c Firestore t√πy DI)
// ------------------------------------------------------

import 'package:flutter/material.dart';
import '../../widgets/type_chip.dart';
import '../../widgets/place_card.dart';
import '../../widgets/skeletons/place_skeleton.dart';
import '../../widgets/empty_view.dart';
import '../../di/repo_provider.dart';
import '../../models/place.dart';
import '../place/place_detail_screen.dart';

class SearchScreen extends StatefulWidget {
  final String initKeyword;
  final String? initType;
  const SearchScreen({super.key, this.initKeyword = '', this.initType});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final _controller = TextEditingController();
  String _type = '';
  Future<List<Place>>? _future;

  // Filter states
  double _minRating = 0.0;
  double _maxRating = 5.0;
  String _sortBy = 'rating'; // 'rating', 'name', 'reviews'
  bool _showFilters = false;

  @override
  void initState() {
    super.initState();
    _controller.text = widget.initKeyword;
    _type = widget.initType ?? '';
    _future = placeRepo.searchPlaces(keyword: _controller.text, type: _type);
  }

  void _runSearch() {
    setState(() {
      _future = placeRepo
          .searchPlaces(
            keyword: _controller.text.trim(),
            type: _type.isEmpty ? null : _type,
          )
          .then((places) {
            // Apply filters
            var filteredPlaces = places.where((place) {
              return place.ratingAvg >= _minRating &&
                  place.ratingAvg <= _maxRating;
            }).toList();

            // Apply sorting
            switch (_sortBy) {
              case 'rating':
                filteredPlaces.sort(
                  (a, b) => b.ratingAvg.compareTo(a.ratingAvg),
                );
                break;
              case 'name':
                filteredPlaces.sort((a, b) => a.name.compareTo(b.name));
                break;
              case 'reviews':
                filteredPlaces.sort(
                  (a, b) => b.ratingCount.compareTo(a.ratingCount),
                );
                break;
            }

            return filteredPlaces;
          });
    });
  }

  void _openDetail(Place p) {
    Navigator.of(
      context,
    ).push(MaterialPageRoute(builder: (_) => PlaceDetailScreen(placeId: p.id)));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        titleSpacing: 0,
        title: TextField(
          controller: _controller,
          autofocus: widget
              .initKeyword
              .isEmpty, // ch·ªâ autofocus khi kh√¥ng c√≥ kw ban ƒë·∫ßu
          onSubmitted: (_) => _runSearch(),
          textInputAction: TextInputAction.search,
          decoration: const InputDecoration(
            hintText: 'T√¨m ƒë·ªãa ƒëi·ªÉm...',
            border: InputBorder.none,
            contentPadding: EdgeInsets.symmetric(vertical: 12),
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(
              _showFilters ? Icons.filter_list : Icons.filter_list_off,
            ),
            tooltip: 'B·ªô l·ªçc',
            onPressed: () {
              setState(() => _showFilters = !_showFilters);
            },
          ),
          IconButton(
            icon: const Icon(Icons.search),
            tooltip: 'T√¨m',
            onPressed: _runSearch,
          ),
        ],
      ),
      body: Column(
        children: [
          // Advanced Filters Panel
          if (_showFilters) _buildFiltersPanel(),

          // H√†ng chips l·ªçc lo·∫°i h√¨nh
          SizedBox(
            height: 44,
            child: ListView(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              children: [
                TypeChip(
                  label: 'T·∫•t c·∫£',
                  selected: _type.isEmpty,
                  onTap: () {
                    setState(() => _type = '');
                    _runSearch();
                  },
                ),
                TypeChip(
                  label: 'bi·ªÉn',
                  selected: _type == 'bi·ªÉn',
                  onTap: () {
                    setState(() => _type = 'bi·ªÉn');
                    _runSearch();
                  },
                ),
                TypeChip(
                  label: 'n√∫i',
                  selected: _type == 'n√∫i',
                  onTap: () {
                    setState(() => _type = 'n√∫i');
                    _runSearch();
                  },
                ),
                TypeChip(
                  label: 'vƒÉn h√≥a',
                  selected: _type == 'vƒÉn h√≥a',
                  onTap: () {
                    setState(() => _type = 'vƒÉn h√≥a');
                    _runSearch();
                  },
                ),
                TypeChip(
                  label: 'thi√™n nhi√™n',
                  selected: _type == 'thi√™n nhi√™n',
                  onTap: () {
                    setState(() => _type = 'thi√™n nhi√™n');
                    _runSearch();
                  },
                ),
                TypeChip(
                  label: '·∫©m th·ª±c',
                  selected: _type == '·∫©m th·ª±c',
                  onTap: () {
                    setState(() => _type = '·∫©m th·ª±c');
                    _runSearch();
                  },
                ),
              ],
            ),
          ),

          // K·∫øt qu·∫£ t√¨m ki·∫øm
          Expanded(
            child: FutureBuilder<List<Place>>(
              future: _future,
              builder: (context, snap) {
                if (snap.connectionState == ConnectionState.waiting) {
                  return GridView.builder(
                    padding: const EdgeInsets.all(16),
                    gridDelegate:
                        const SliverGridDelegateWithFixedCrossAxisCount(
                          crossAxisCount: 2,
                          crossAxisSpacing: 12,
                          mainAxisSpacing: 12,
                          childAspectRatio: 0.78,
                        ),
                    itemBuilder: (context, index) => const PlaceSkeleton(),
                    itemCount: 6,
                  );
                }

                if (snap.hasError) {
                  return const Padding(
                    padding: EdgeInsets.all(16),
                    child: EmptyView(message: 'C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu.'),
                  );
                }

                final list = snap.data ?? [];
                if (list.isEmpty) {
                  return const Padding(
                    padding: EdgeInsets.all(16),
                    child: EmptyView(
                      message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm ph√π h·ª£p.',
                    ),
                  );
                }

                return GridView.builder(
                  padding: const EdgeInsets.all(16),
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    crossAxisSpacing: 12,
                    mainAxisSpacing: 12,
                    childAspectRatio: 0.78,
                  ),
                  itemCount: list.length,
                  itemBuilder: (context, index) {
                    final p = list[index];
                    return PlaceCard(place: p, onTap: () => _openDetail(p));
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  // Widget hi·ªÉn th·ªã panel b·ªô l·ªçc n√¢ng cao
  Widget _buildFiltersPanel() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[50],
        border: Border(bottom: BorderSide(color: Colors.grey[200]!)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Ti√™u ƒë·ªÅ v√† n√∫t ƒë√≥ng
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'B·ªô l·ªçc n√¢ng cao',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              ),
              TextButton(
                onPressed: () {
                  setState(() {
                    _minRating = 0.0;
                    _maxRating = 5.0;
                    _sortBy = 'rating';
                  });
                  _runSearch();
                },
                child: const Text('ƒê·∫∑t l·∫°i'),
              ),
            ],
          ),

          const SizedBox(height: 16),

          // S·∫Øp x·∫øp theo
          const Text(
            'S·∫Øp x·∫øp theo:',
            style: TextStyle(fontWeight: FontWeight.w500),
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(child: _buildSortChip('rating', 'ƒê√°nh gi√° cao')),
              const SizedBox(width: 8),
              Expanded(child: _buildSortChip('name', 'T√™n A-Z')),
              const SizedBox(width: 8),
              Expanded(child: _buildSortChip('reviews', 'Nhi·ªÅu review')),
            ],
          ),

          const SizedBox(height: 16),

          // Kho·∫£ng ƒë√°nh gi√°
          Text(
            'ƒê√°nh gi√° t·ª´ ${_minRating.toStringAsFixed(1)} ƒë·∫øn ${_maxRating.toStringAsFixed(1)} sao',
            style: const TextStyle(fontWeight: FontWeight.w500),
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('T·ªëi thi·ªÉu: ${_minRating.toStringAsFixed(1)}'),
                    Slider(
                      value: _minRating,
                      min: 0.0,
                      max: 5.0,
                      divisions: 10,
                      activeColor: Theme.of(context).primaryColor,
                      onChanged: (value) {
                        setState(() {
                          _minRating = value;
                          if (_minRating > _maxRating) {
                            _maxRating = _minRating;
                          }
                        });
                        _runSearch();
                      },
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('T·ªëi ƒëa: ${_maxRating.toStringAsFixed(1)}'),
                    Slider(
                      value: _maxRating,
                      min: 0.0,
                      max: 5.0,
                      divisions: 10,
                      activeColor: Theme.of(context).primaryColor,
                      onChanged: (value) {
                        setState(() {
                          _maxRating = value;
                          if (_maxRating < _minRating) {
                            _minRating = _maxRating;
                          }
                        });
                        _runSearch();
                      },
                    ),
                  ],
                ),
              ),
            ],
          ),

          const SizedBox(height: 16),

          // N√∫t √°p d·ª•ng b·ªô l·ªçc
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _runSearch,
              icon: const Icon(Icons.filter_alt),
              label: const Text('√Åp d·ª•ng b·ªô l·ªçc'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).primaryColor,
                foregroundColor: Colors.white,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Widget chip s·∫Øp x·∫øp
  Widget _buildSortChip(String value, String label) {
    final isSelected = _sortBy == value;
    return GestureDetector(
      onTap: () {
        setState(() => _sortBy = value);
        _runSearch();
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
          color: isSelected ? Theme.of(context).primaryColor : Colors.grey[200],
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: isSelected
                ? Theme.of(context).primaryColor
                : Colors.grey[300]!,
          ),
        ),
        child: Text(
          label,
          style: TextStyle(
            color: isSelected ? Colors.white : Colors.grey[700],
            fontSize: 12,
            fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
          ),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}
