// lib/features/onboarding/onboarding_screen.dart
// ------------------------------------------------------
// üéØ ONBOARDING SCREEN - M√ÄN H√åNH GI·ªöI THI·ªÜU
// - Gi·ªõi thi·ªáu ·ª©ng d·ª•ng cho ng∆∞·ªùi d√πng m·ªõi
// - H∆∞·ªõng d·∫´n c√°c t√≠nh nƒÉng ch√≠nh
// - Slider v·ªõi animation ƒë·∫πp m·∫Øt
// ------------------------------------------------------

import 'package:flutter/material.dart';
import '../../widgets/animated_card.dart';

class OnboardingScreen extends StatefulWidget {
  const OnboardingScreen({super.key});

  @override
  State<OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<OnboardingScreen> {
  late PageController _pageController;
  int _currentPage = 0;

  final List<OnboardingData> _onboardingData = [
    OnboardingData(
      title: 'Kh√°m ph√° ƒë·ªãa ƒëi·ªÉm du l·ªãch',
      description:
          'T√¨m hi·ªÉu nh·ªØng ƒë·ªãa ƒëi·ªÉm du l·ªãch tuy·ªát v·ªùi t·ª´ nh·ªØng ƒë√°nh gi√° ch√¢n th·ª±c c·ªßa c·ªông ƒë·ªìng',
      image: Icons.explore,
      color: Colors.blue,
    ),
    OnboardingData(
      title: 'ƒê√°nh gi√° v√† chia s·∫ª',
      description:
          'Vi·∫øt ƒë√°nh gi√° chi ti·∫øt v√† chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªõi m·ªçi ng∆∞·ªùi',
      image: Icons.rate_review,
      color: Colors.green,
    ),
    OnboardingData(
      title: 'L∆∞u ƒë·ªãa ƒëi·ªÉm y√™u th√≠ch',
      description:
          'L∆∞u l·∫°i nh·ªØng ƒë·ªãa ƒëi·ªÉm b·∫°n quan t√¢m v√† t·∫°o danh s√°ch ri√™ng c·ªßa m√¨nh',
      image: Icons.favorite,
      color: Colors.red,
    ),
    OnboardingData(
      title: 'B·∫£n ƒë·ªì th√¥ng minh',
      description:
          'Xem v·ªã tr√≠ ƒë·ªãa ƒëi·ªÉm tr√™n b·∫£n ƒë·ªì v√† l·∫≠p k·∫ø ho·∫°ch h√†nh tr√¨nh ho√†n h·∫£o',
      image: Icons.map,
      color: Colors.orange,
    ),
  ];

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            // Skip button
            Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  // Page indicator
                  Row(
                    children: List.generate(
                      _onboardingData.length,
                      (index) => Container(
                        margin: const EdgeInsets.symmetric(horizontal: 4),
                        width: _currentPage == index ? 24 : 8,
                        height: 8,
                        decoration: BoxDecoration(
                          color: _currentPage == index
                              ? Theme.of(context).primaryColor
                              : Colors.grey[300],
                          borderRadius: BorderRadius.circular(4),
                        ),
                      ),
                    ),
                  ),
                  TextButton(
                    onPressed: _skipOnboarding,
                    child: const Text('B·ªè qua'),
                  ),
                ],
              ),
            ),

            // Page view
            Expanded(
              child: PageView.builder(
                controller: _pageController,
                onPageChanged: (index) {
                  setState(() => _currentPage = index);
                },
                itemCount: _onboardingData.length,
                itemBuilder: (context, index) {
                  final data = _onboardingData[index];
                  return AnimatedCard(
                    delay: Duration(milliseconds: index * 200),
                    child: _buildOnboardingPage(data),
                  );
                },
              ),
            ),

            // Bottom navigation
            Padding(
              padding: const EdgeInsets.all(24),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  // Previous button
                  if (_currentPage > 0)
                    TextButton.icon(
                      onPressed: _previousPage,
                      icon: const Icon(Icons.arrow_back),
                      label: const Text('Tr∆∞·ªõc'),
                    )
                  else
                    const SizedBox(width: 80),

                  // Next/Get Started button
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          Theme.of(context).primaryColor,
                          Theme.of(context).primaryColor.withValues(alpha: 0.8),
                        ],
                      ),
                      borderRadius: BorderRadius.circular(12),
                      boxShadow: [
                        BoxShadow(
                          color: Theme.of(
                            context,
                          ).primaryColor.withValues(alpha: 0.3),
                          blurRadius: 12,
                          offset: const Offset(0, 6),
                        ),
                      ],
                    ),
                    child: ElevatedButton.icon(
                      onPressed: _currentPage == _onboardingData.length - 1
                          ? _startApp
                          : _nextPage,
                      icon: Icon(
                        _currentPage == _onboardingData.length - 1
                            ? Icons.rocket_launch
                            : Icons.arrow_forward,
                      ),
                      label: Text(
                        _currentPage == _onboardingData.length - 1
                            ? 'B·∫Øt ƒë·∫ßu'
                            : 'Ti·∫øp theo',
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.transparent,
                        foregroundColor: Colors.white,
                        shadowColor: Colors.transparent,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 32,
                          vertical: 16,
                        ),
                        textStyle: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Widget x√¢y d·ª±ng trang onboarding
  Widget _buildOnboardingPage(OnboardingData data) {
    return Padding(
      padding: const EdgeInsets.all(32),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Icon/Image
          Container(
            width: 200,
            height: 200,
            decoration: BoxDecoration(
              color: data.color.withValues(alpha: 0.1),
              shape: BoxShape.circle,
              border: Border.all(
                color: data.color.withValues(alpha: 0.3),
                width: 2,
              ),
            ),
            child: Icon(data.image, size: 100, color: data.color),
          ),

          const SizedBox(height: 48),

          // Title
          Text(
            data.title,
            style: Theme.of(context).textTheme.headlineMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: data.color,
            ),
            textAlign: TextAlign.center,
          ),

          const SizedBox(height: 24),

          // Description
          Text(
            data.description,
            style: Theme.of(context).textTheme.bodyLarge?.copyWith(
              color: Colors.grey[600],
              height: 1.5,
            ),
            textAlign: TextAlign.center,
          ),

          const SizedBox(height: 48),

          // Feature highlights
          _buildFeatureHighlights(data),
        ],
      ),
    );
  }

  // Widget hi·ªÉn th·ªã c√°c t√≠nh nƒÉng n·ªïi b·∫≠t
  Widget _buildFeatureHighlights(OnboardingData data) {
    List<String> highlights = [];

    switch (data.title) {
      case 'Kh√°m ph√° ƒë·ªãa ƒëi·ªÉm du l·ªãch':
        highlights = [
          'T√¨m ki·∫øm th√¥ng minh',
          'ƒê√°nh gi√° ch√¢n th·ª±c',
          '·∫¢nh ch·∫•t l∆∞·ª£ng cao',
        ];
        break;
      case 'ƒê√°nh gi√° v√† chia s·∫ª':
        highlights = ['Vi·∫øt review d·ªÖ d√†ng', 'Chia s·∫ª ·∫£nh', 'ƒê√°nh gi√° sao'];
        break;
      case 'L∆∞u ƒë·ªãa ƒëi·ªÉm y√™u th√≠ch':
        highlights = [
          'Danh s√°ch c√° nh√¢n',
          'ƒê·ªìng b·ªô ƒë√°m m√¢y',
          'Chia s·∫ª v·ªõi b·∫°n b√®',
        ];
        break;
      case 'B·∫£n ƒë·ªì th√¥ng minh':
        highlights = ['V·ªã tr√≠ ch√≠nh x√°c', 'H∆∞·ªõng d·∫´n ƒë∆∞·ªùng ƒëi', 'T√≠ch h·ª£p GPS'];
        break;
    }

    return Column(
      children: highlights
          .map(
            (highlight) => Padding(
              padding: const EdgeInsets.symmetric(vertical: 4),
              child: Row(
                children: [
                  Icon(Icons.check_circle, color: data.color, size: 20),
                  const SizedBox(width: 12),
                  Text(
                    highlight,
                    style: TextStyle(
                      color: Colors.grey[700],
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            ),
          )
          .toList(),
    );
  }

  // Chuy·ªÉn ƒë·∫øn trang ti·∫øp theo
  void _nextPage() {
    if (_currentPage < _onboardingData.length - 1) {
      _pageController.nextPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  // Chuy·ªÉn v·ªÅ trang tr∆∞·ªõc
  void _previousPage() {
    if (_currentPage > 0) {
      _pageController.previousPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  // B·ªè qua onboarding
  void _skipOnboarding() {
    _startApp();
  }

  // B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng ·ª©ng d·ª•ng
  void _startApp() {
    // TODO: L∆∞u tr·∫°ng th√°i ƒë√£ xem onboarding v√† chuy·ªÉn ƒë·∫øn m√†n h√¨nh ch√≠nh
    Navigator.of(context).pushReplacementNamed('/main');
  }
}

// Class ch·ª©a d·ªØ li·ªáu onboarding
class OnboardingData {
  final String title;
  final String description;
  final IconData image;
  final Color color;

  OnboardingData({
    required this.title,
    required this.description,
    required this.image,
    required this.color,
  });
}
